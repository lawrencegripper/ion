// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trace.proto

package trace

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetFlowRequest struct {
	CorrelationID        string   `protobuf:"bytes,1,opt,name=correlationID,proto3" json:"correlationID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFlowRequest) Reset()         { *m = GetFlowRequest{} }
func (m *GetFlowRequest) String() string { return proto.CompactTextString(m) }
func (*GetFlowRequest) ProtoMessage()    {}
func (*GetFlowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_trace_24f21ce4024d85b8, []int{0}
}
func (m *GetFlowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFlowRequest.Unmarshal(m, b)
}
func (m *GetFlowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFlowRequest.Marshal(b, m, deterministic)
}
func (dst *GetFlowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlowRequest.Merge(dst, src)
}
func (m *GetFlowRequest) XXX_Size() int {
	return xxx_messageInfo_GetFlowRequest.Size(m)
}
func (m *GetFlowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlowRequest proto.InternalMessageInfo

func (m *GetFlowRequest) GetCorrelationID() string {
	if m != nil {
		return m.CorrelationID
	}
	return ""
}

type GetFlowResponse struct {
	FlowJSON             string   `protobuf:"bytes,1,opt,name=flowJSON,proto3" json:"flowJSON,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFlowResponse) Reset()         { *m = GetFlowResponse{} }
func (m *GetFlowResponse) String() string { return proto.CompactTextString(m) }
func (*GetFlowResponse) ProtoMessage()    {}
func (*GetFlowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_trace_24f21ce4024d85b8, []int{1}
}
func (m *GetFlowResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFlowResponse.Unmarshal(m, b)
}
func (m *GetFlowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFlowResponse.Marshal(b, m, deterministic)
}
func (dst *GetFlowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlowResponse.Merge(dst, src)
}
func (m *GetFlowResponse) XXX_Size() int {
	return xxx_messageInfo_GetFlowResponse.Size(m)
}
func (m *GetFlowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlowResponse proto.InternalMessageInfo

func (m *GetFlowResponse) GetFlowJSON() string {
	if m != nil {
		return m.FlowJSON
	}
	return ""
}

func init() {
	proto.RegisterType((*GetFlowRequest)(nil), "GetFlowRequest")
	proto.RegisterType((*GetFlowResponse)(nil), "GetFlowResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TraceServiceClient is the client API for TraceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TraceServiceClient interface {
	GetFlow(ctx context.Context, in *GetFlowRequest, opts ...grpc.CallOption) (*GetFlowResponse, error)
}

type traceServiceClient struct {
	cc *grpc.ClientConn
}

func NewTraceServiceClient(cc *grpc.ClientConn) TraceServiceClient {
	return &traceServiceClient{cc}
}

func (c *traceServiceClient) GetFlow(ctx context.Context, in *GetFlowRequest, opts ...grpc.CallOption) (*GetFlowResponse, error) {
	out := new(GetFlowResponse)
	err := c.cc.Invoke(ctx, "/TraceService/GetFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraceServiceServer is the server API for TraceService service.
type TraceServiceServer interface {
	GetFlow(context.Context, *GetFlowRequest) (*GetFlowResponse, error)
}

func RegisterTraceServiceServer(s *grpc.Server, srv TraceServiceServer) {
	s.RegisterService(&_TraceService_serviceDesc, srv)
}

func _TraceService_GetFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceServiceServer).GetFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TraceService/GetFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceServiceServer).GetFlow(ctx, req.(*GetFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TraceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TraceService",
	HandlerType: (*TraceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlow",
			Handler:    _TraceService_GetFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trace.proto",
}

func init() { proto.RegisterFile("trace.proto", fileDescriptor_trace_24f21ce4024d85b8) }

var fileDescriptor_trace_24f21ce4024d85b8 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x29, 0x4a, 0x4c,
	0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x32, 0xe3, 0xe2, 0x73, 0x4f, 0x2d, 0x71, 0xcb,
	0xc9, 0x2f, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x52, 0xe1, 0xe2, 0x4d, 0xce, 0x2f,
	0x2a, 0x4a, 0xcd, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0xf3, 0x74, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x42, 0x15, 0x54, 0xd2, 0xe5, 0xe2, 0x87, 0xeb, 0x2b, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15,
	0x92, 0xe2, 0xe2, 0x48, 0xcb, 0xc9, 0x2f, 0xf7, 0x0a, 0xf6, 0xf7, 0x83, 0xea, 0x81, 0xf3, 0x8d,
	0xec, 0xb8, 0x78, 0x42, 0x40, 0xb6, 0x06, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0xe9, 0x71,
	0xb1, 0x43, 0xb5, 0x0b, 0xf1, 0xeb, 0xa1, 0x3a, 0x40, 0x4a, 0x40, 0x0f, 0xcd, 0x64, 0x25, 0x06,
	0x27, 0xf6, 0x28, 0x56, 0xb0, 0xab, 0x93, 0xd8, 0xc0, 0xce, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x94, 0xc2, 0x27, 0xcd, 0xc5, 0x00, 0x00, 0x00,
}
